import pandas as pd
import google.generativeai as genai
import os
import json
import time

def run_llm_term_generation():
    try:
        genai.configure(api_key=os.environ["GEMINI_API_KEY"])
        print("Gemini API Key configured successfully.")
    except KeyError:
        print("ERROR: The GEMINI_API_KEY environment variable was not found. Please set it.")
        exit()
    except Exception as e:
        print(f"ERROR configuring Gemini API: {e}")
        exit()

    LLM_MODEL_NAME = os.environ.get("LLM_MODEL_NAME")
    LLM_MODEL_TEMPERATURE = float(os.environ.get("LLM_MODEL_TEMPERATURE"))
    LLM_GENERATED_OUTPUT_FILE = os.environ.get("LLM_GENERATED_OUTPUT_FILE", "llm_generated_terms_raw.csv")
    NUM_TERMS_TO_GENERATE = int(os.environ.get("NUM_TERMS_TO_GENERATE", 500))

    generation_config_json = genai.GenerationConfig(
        temperature=LLM_MODEL_TEMPERATURE,
        response_mime_type="application/json"
    )

    print(f"Configuration loaded:")
    print(f"  Model: {LLM_MODEL_NAME}")
    print(f"  Temperature: {LLM_MODEL_TEMPERATURE}")
    print(f"  Terms to generate: {NUM_TERMS_TO_GENERATE}")
    print(f"  Output file: {LLM_GENERATED_OUTPUT_FILE}")


    system_instruction = "You are an expert geologist and ontology engineer specializing in Brazilian Pre-Salt petroleum systems. Your task is to identify the most critical concepts for building a domain ontology focused on analog reservoir identification."

    prompt_template = f"""Based on your comprehensive knowledge of Brazilian Pre-Salt petroleum systems and the requirements for identifying analog reservoirs, generate a list of the **{NUM_TERMS_TO_GENERATE} most important and representative concepts** in English.

    **Instructions:**
    1.  Focus on concepts crucial for reservoir characterization, comparison, and analog identification (e.g., depositional facies, diagenetic processes, structural elements, rock types, key properties, relevant geological time units).
    2.  Return all concepts in English, in their singular, canonical form (e.g., "Carbonate", "Fault"). Use title case.
    3.  Exclude specific named locations (wells, fields, basins), author names, companies, units, or numerical values. Focus only on conceptual entities (classes or types).
    4.  The list should represent a diverse range of relevant concepts.

    **OUTPUT FORMAT:**
    Your response MUST BE a valid JSON array of unique concept strings, ordered roughly by relevance.
    (e.g., ["Microbial Carbonate", "Rift Phase", "Sag Phase", "Source Rock", "Dolomitization", ...])
    """

    all_generated_terms = []

    try:
        model = genai.GenerativeModel(
            model_name=LLM_MODEL_NAME,
            system_instruction=system_instruction,
            generation_config=generation_config_json
        )
    except Exception as e:
        print(f"ERROR initializing GenerativeModel: {e}")
        exit()

    print(f"\nRequesting LLM to generate {NUM_TERMS_TO_GENERATE} core concepts...")
    response = None
    try:
        response = model.generate_content(prompt_template)

        if not response.parts:
            block_reason = "Unknown"
            try:
                block_reason = response.prompt_feedback.block_reason
            except IndexError:
                pass
            print(f"  -> ERROR: API call was blocked. Reason: {block_reason}")
            exit()

        all_generated_terms = json.loads(response.text)
        if not isinstance(all_generated_terms, list):
            raise ValueError("LLM response is not a JSON list.")

        print(f"  -> Successfully generated {len(all_generated_terms)} terms.")

    except json.JSONDecodeError:
         print("  -> ERROR: LLM returned invalid JSON.")
         print("Raw response:", response.text if response else "No response")
         exit()
    except Exception as e:
        print(f"  -> An error occurred during generation: {e}")
        exit()

    print("\nGeneration complete. Saving generated terms...")

    unique_generated_terms = list(term.strip() for term in all_generated_terms if isinstance(term, str) and term.strip())

    output_dir = os.path.dirname(LLM_GENERATED_OUTPUT_FILE)
    if output_dir and not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
            print(f"Created output directory: {output_dir}")
        except OSError as e:
            print(f"ERROR creating directory {output_dir}: {e}")
            exit()

    try:
        df_final_results = pd.DataFrame(unique_generated_terms, columns=['Readable_Term'])
        df_final_results.to_csv(LLM_GENERATED_OUTPUT_FILE, index=False, encoding='utf-8-sig')

        print(f"\nSuccess! A total of {len(unique_generated_terms)} unique terms were generated by the LLM and saved to '{LLM_GENERATED_OUTPUT_FILE}'.")
    except Exception as e:
        print(f"ERROR saving results to CSV file '{LLM_GENERATED_OUTPUT_FILE}': {e}")
